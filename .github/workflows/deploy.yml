name: Deploy FastAPI to EC2 (systemd, no TLS)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Assignments/Session2-23Aug2025/clinicalbert-api/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for $GITHUB_REPOSITORY info)
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Remote deploy (systemd + nginx)
        env:
          EC2_HOST:           ${{ secrets.EC2_HOST }}
          EC2_USER:           ${{ vars.EC2_USER || 'ubuntu' }}
          EC2_APP_DIR:        ${{ secrets.EC2_APP_DIR }}   # e.g. /home/ubuntu/apps/clinicalbert
          APP_SUBDIR:         Assignments/Session2-23Aug2025/clinicalbert-api
          BRANCH:             ${{ vars.DEPLOY_BRANCH || 'main' }}
          GITHUB_REPOSITORY:  ${{ github.repository }}
          ENTRY:              main:app                     # use app.main:app if your app is in app/main.py
        run: |
          # Pass env to remote and run script
          ssh -o StrictHostKeyChecking=no "${EC2_USER}@${EC2_HOST}" \
            "EC2_APP_DIR='${EC2_APP_DIR}' APP_SUBDIR='${APP_SUBDIR}' BRANCH='${BRANCH}' GITHUB_REPOSITORY='${GITHUB_REPOSITORY}' ENTRY='${ENTRY}' bash -s" <<'EOF'
          set -euxo pipefail

          sudo apt-get update -y
          sudo apt-get install -y python3-pip python3-venv git nginx

          mkdir -p "${EC2_APP_DIR}"
          cd "${EC2_APP_DIR}"

          if [ -d .git ]; then
            git fetch --all
            git reset --hard "origin/${BRANCH}"
          else
            git init
            git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
            git fetch origin "${BRANCH}"
            git checkout -b "${BRANCH}" FETCH_HEAD
          fi

          APP_PATH="${EC2_APP_DIR}/${APP_SUBDIR}"

          # venv + deps
          python3 -m venv "${APP_PATH}/.venv"
          # Upgrade pip, setuptools, and wheel first to avoid Python 3.12 compatibility issues
          "${APP_PATH}/.venv/bin/python" -m pip install --upgrade pip>=23.3
          "${APP_PATH}/.venv/bin/python" -m pip install --upgrade setuptools>=69.0.0 wheel>=0.42.0

          REQ="${APP_PATH}/requirements.txt"

          # ---- Patch only the pins that lack Py3.12 wheels ----
          # torch 2.1.0 -> 2.4.1 (CPU wheels exist)
          sed -i 's/^torch==2\.1\.0$/torch==2.4.1/' "$REQ" || true
          # numpy 1.24.3 -> 1.26.4
          sed -i 's/^numpy==1\.24\.3$/numpy==1.26.4/' "$REQ" || true
          # scikit-learn 1.3.0 -> 1.4.2
          sed -i 's/^scikit-learn==1\.3\.0$/scikit-learn==1.4.2/' "$REQ" || true
          # faiss-cpu 1.7.4 -> 1.8.0
          sed -i 's/^faiss-cpu==1\.7\.4$/faiss-cpu==1.8.0/' "$REQ" || true
          # tokenizers 0.15.0 -> 0.15.2
          sed -i 's/^tokenizers==0\.15\.0$/tokenizers==0.15.2/' "$REQ" || true
          sed -i 's/^datasets==2\.15\.0$/datasets==2.19.0/' "$REQ" || true
          sed -i 's/^accelerate==0\.25\.0$/accelerate==0.30.0/' "$REQ" || true

          # Install torch first from CPU wheels, then the rest (avoid source builds)
          if grep -q '^torch' "$REQ"; then
            TORCH_VER="$(grep '^torch' "$REQ" | head -n1 | awk -F'==' '{print $2}')"
            echo "Installing PyTorch ${TORCH_VER} with CPU wheels..."
            "${APP_PATH}/.venv/bin/pip" install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu "torch==${TORCH_VER}"
            
            # Install other ML packages that might need special handling
            if grep -q '^numpy' "$REQ"; then
              NUMPY_VER="$(grep '^numpy' "$REQ" | head -n1 | awk -F'==' '{print $2}')"
              "${APP_PATH}/.venv/bin/pip" install --no-cache-dir "numpy==${NUMPY_VER}"
            fi
            
            if grep -q '^scikit-learn' "$REQ"; then
              SKLEARN_VER="$(grep '^scikit-learn' "$REQ" | head -n1 | awk -F'==' '{print $2}')"
              "${APP_PATH}/.venv/bin/pip" install --no-cache-dir "scikit-learn==${SKLEARN_VER}"
            fi
            
            # Create filtered requirements without torch, numpy, scikit-learn
            grep -v -E '^(torch|numpy|scikit-learn)' "$REQ" > /tmp/req-filtered.txt
            "${APP_PATH}/.venv/bin/pip" install --no-cache-dir -r /tmp/req-filtered.txt
          else
            "${APP_PATH}/.venv/bin/pip" install --no-cache-dir -r "$REQ"
          fi

          # systemd unit (service name: fastapi)
          sudo tee /etc/systemd/system/fastapi.service >/dev/null <<UNIT
          [Unit]
          Description=FastAPI (Uvicorn) - clinicalbert-api
          After=network.target

          [Service]
          User=${USER}
          WorkingDirectory=${APP_PATH}
          Environment="PATH=${APP_PATH}/.venv/bin"
          EnvironmentFile=-${APP_PATH}/.env
          ExecStart=${APP_PATH}/.venv/bin/uvicorn ${ENTRY} --host 127.0.0.1 --port 8001 --workers 2
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          UNIT

          sudo systemctl daemon-reload
          sudo systemctl enable fastapi || true
          sudo systemctl restart fastapi

          # nginx site → proxy to localhost:8001
          sudo tee /etc/nginx/sites-available/fastapi >/dev/null <<'NGINX'
          server {
            listen 80;
            server_name _;
            location /                  { proxy_pass http://127.0.0.1:8001; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; }
            location /docs              { proxy_pass http://127.0.0.1:8001; }
            location /openapi.json      { proxy_pass http://127.0.0.1:8001; }
            location /health            { proxy_pass http://127.0.0.1:8001; access_log off; }
          }
          NGINX
          sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/fastapi
          sudo rm -f /etc/nginx/sites-enabled/default || true
          sudo nginx -t
          sudo systemctl restart nginx

          # quick local checks (don't fail job)
          curl -fsS http://127.0.0.1:8001/openapi.json >/dev/null && echo "Uvicorn OK" || true
          curl -fsS http://localhost/docs >/dev/null && echo "/docs OK via nginx" || true
          EOF
      - name: Smoke test (external)
        env:
          URL: ${{ format('http://{0}/docs', secrets.EC2_HOST) }}
        run: |
          echo "Testing deployment at: $URL"
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            if [ "$code" -ge 200 ] && [ "$code" -lt 400 ]; then
              echo "### ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
              echo "- FastAPI docs accessible at: $URL" >> $GITHUB_STEP_SUMMARY
              echo "- HTTP status: $code" >> $GITHUB_STEP_SUMMARY
              exit 0
            fi
            echo "Attempt $i: HTTP $code, retrying..."
            sleep 2
          done
          echo "### ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "- Could not reach $URL after 60 seconds" >> $GITHUB_STEP_SUMMARY
          exit 1    
