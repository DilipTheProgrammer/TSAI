name: Deploy FastAPI to EC2 (systemd, no TLS)

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Assignments/Session2-23Aug2025/clinicalbert-api/**'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (for $GITHUB_REPOSITORY info)
        uses: actions/checkout@v4

      - name: Start SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: Add EC2 to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
      - name: Remote deploy (API + Next.js UI + Nginx)
        env:
          EC2_HOST:           ${{ secrets.EC2_HOST }}
          EC2_USER:           ${{ vars.EC2_USER || 'ubuntu' }}
          EC2_APP_DIR:        ${{ secrets.EC2_APP_DIR }}   # e.g. /home/ubuntu/apps/clinicalbert
          APP_SUBDIR:         Assignments/Session2-23Aug2025/clinicalbert-api
          BRANCH:             ${{ vars.DEPLOY_BRANCH || 'main' }}
          GITHUB_REPOSITORY:  ${{ github.repository }}
          ENTRY:              main:app                     # use app.main:app if your app is in app/main.py
        run: |
          # Pass env to remote and run script
          ssh -o StrictHostKeyChecking=no "${EC2_USER}@${EC2_HOST}" \
            "EC2_APP_DIR='${EC2_APP_DIR}' APP_SUBDIR='${APP_SUBDIR}' BRANCH='${BRANCH}' GITHUB_REPOSITORY='${GITHUB_REPOSITORY}' ENTRY='${ENTRY}' bash -s" <<'EOF'
          set -euxo pipefail

          
          # --- Base packages ---
        

          # --- Node 20 + pnpm (for Next.js UI) ---

          if ! command -v node >/dev/null 2>&1; then
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs
          fi
          sudo corepack enable || true
          sudo corepack prepare pnpm@9 --activate || true
          if ! command -v pnpm >/dev/null 2>&1; then
            sudo npm i -g pnpm@9
          fi

          # Quiet npm as a fallback
          npm config set fund false; npm config set audit false

          # --- App code + venv + deps ---

          mkdir -p "${EC2_APP_DIR}"
          cd "${EC2_APP_DIR}"

          if [ -d .git ]; then
            git fetch --all
            git reset --hard "origin/${BRANCH}"
          else
            git init
            git remote add origin "https://github.com/${GITHUB_REPOSITORY}.git"
            git fetch origin "${BRANCH}"
            git checkout -b "${BRANCH}" FETCH_HEAD
          fi

          APP_PATH="${EC2_APP_DIR}/${APP_SUBDIR}"
          REQ="${APP_PATH}/requirements.txt"
          if [ ! -f "$REQ" ]; then
            echo "requirements.txt not found at: $REQ"
            ls -la "${APP_PATH}"
            exit 1
          fi
          echo "Using requirements at: $REQ"
          

          echo "=== Fixing Next.js dependencies ==="
          if [ -f "pnpm-lock.yaml" ] && [ -f "package.json" ]; then
            echo "Regenerating pnpm lockfile to fix version mismatch..."
            rm -f pnpm-lock.yaml
            pnpm install --no-frozen-lockfile
          elif [ -f "package.json" ]; then
            echo "Installing Next.js dependencies..."
            pnpm install --no-frozen-lockfile
          fi
          
          echo "=== Building Next.js frontend ==="
          if [ -f "package.json" ]; then
            pnpm build
          fi

          # venv + deps
          python3 -m venv "${APP_PATH}/.venv"
          "${APP_PATH}/.venv/bin/python" -m pip install --upgrade pip setuptools wheel

          # Critical env vars to keep legacy sdists from reaching for stdlib distutils
          export SETUPTOOLS_USE_DISTUTILS=local
          export PIP_PREFER_BINARY=1
          export PIP_ONLY_BINARY=:all:

          # --- OPTIONAL: if you did NOT edit requirements in repo, uncomment this patch block ---
          # sed -i 's/^torch==2\.1\.0$/torch==2.4.1/' "$REQ" || true
          # sed -i 's/^numpy==1\.24\.3$/numpy==1.26.4/' "$REQ" || true
          # sed -i 's/^scikit-learn==1\.3\.0$/scikit-learn==1.4.2/' "$REQ" || true
          # sed -i 's/^faiss-cpu==1\.7\.4$/faiss-cpu==1.8.0/' "$REQ" || true
          # sed -i 's/^tokenizers==0\.15\.0$/tokenizers==0.15.2/' "$REQ" || true
          # sed -i 's/^transformers==4\.35\.0$/transformers==4.39.3/' "$REQ" || true
          # if grep -Eq '^[[:space:]]*psycopg2([<=>]|$)' "$REQ"; then
          #   sed -i -E 's/^[[:space:]]*psycopg2([<=>].*)?$/psycopg2-binary==2.9.9/' "$REQ"
          # fi

          # --- Install torch from CPU wheel index (no CUDA on free-tier) ---
          "${APP_PATH}/.venv/bin/pip" install --no-cache-dir --index-url https://download.pytorch.org/whl/cpu "torch==2.4.1"

          # --- Install all remaining deps using wheels-only ---
          if ! "${APP_PATH}/.venv/bin/pip" install --no-cache-dir --prefer-binary --only-binary=:all: -r "${REQ}"; then
            echo "== Wheels-only install failed. Showing verbose offender (likely lacks cp312 wheel) =="
            "${APP_PATH}/.venv/bin/pip" install -v --prefer-binary --only-binary=:all: -r "${REQ}" || true

            # If the offender is faiss-cpu on your architecture, you can uncomment this fallback:
            # sed -i '/^faiss-cpu/d' "${REQ}"
            if grep -q '^faiss-cpu' "$REQ"; then
              sed -i '/^faiss-cpu/d' "$REQ"
              "${APP_PATH}/.venv/bin/pip" install --no-cache-dir --prefer-binary --only-binary=:all: -r "$REQ"
            else
              exit 1
            fi
          fi

          # systemd unit (service name: fastapi)
          sudo tee /etc/systemd/system/fastapi.service >/dev/null <<UNIT
          [Unit]
          Description=FastAPI (Uvicorn) - clinicalbert-api
          After=network.target

          [Service]
          User=${USER}
          WorkingDirectory=${APP_PATH}
          Environment="PATH=${APP_PATH}/.venv/bin"
          EnvironmentFile=-${APP_PATH}/.env
          ExecStart=${APP_PATH}/.venv/bin/uvicorn ${ENTRY} --host 127.0.0.1 --port 8001 --workers 2
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          UNIT

          sudo systemctl daemon-reload
          sudo systemctl enable fastapi || true
          sudo systemctl restart fastapi

          # --- Build Next.js UI (port 3000) ---
          cd "${APP_PATH}"
          # Ensure UI calls backend via /api (no CORS)
          if ! grep -q '^NEXT_PUBLIC_API_BASE=' "${APP_PATH}/.env.production" 2>/dev/null && \
            ! grep -q '^NEXT_PUBLIC_API_BASE=' "${APP_PATH}/.env.production.local" 2>/dev/null; then
            echo 'NEXT_PUBLIC_API_BASE=/api' >> "${APP_PATH}/.env.production.local"
          fi

          if [ -f pnpm-lock.yaml ]; then
            # quieter, less chattiness, and retry once
            (pnpm install --no-frozen-lockfile --reporter=silent --network-concurrency=8) || \
            (sleep 5; pnpm install --no-frozen-lockfile --reporter=silent --network-concurrency=6)
            PNPM_SILENT=1 pnpm build
          else
            # npm fallback
            if [ -f package-lock.json ]; then npm ci --quiet; else npm install --quiet --no-audit --no-fund; fi
            NODE_OPTIONS="--max-old-space-size=512" npm run --silent build
          fi
          # --- systemd: Next.js UI (port 3000) ---
          sudo tee /etc/systemd/system/nextjs.service >/dev/null <<'UNIT'
          [Unit]
          Description=Next.js UI (clinicalbert)
          After=network.target

          [Service]
          User=ubuntu
          WorkingDirectory=/home/ubuntu/apps/clinicalbert/Assignments/Session2-23Aug2025/clinicalbert-api
          Environment=NODE_ENV=production
          Environment=NEXT_TELEMETRY_DISABLED=1
          ExecStart=/bin/bash -lc '[ -f pnpm-lock.yaml ] && pnpm start -- -p 3000 || npm run start -- -p 3000'
          Restart=always
          RestartSec=5

          [Install]
          WantedBy=multi-user.target
          UNIT

          sudo systemctl daemon-reload
          sudo systemctl enable nextjs || true
          sudo systemctl restart nextjs

          # nginx site â†’ proxy to localhost:8001
          sudo tee /etc/nginx/sites-available/fastapi >/dev/null <<'NGINX'
          server {
            listen 80;
            server_name _;
            location /{ proxy_pass http://127.0.0.1:3000; 
                        proxy_http_version 1.1;
                        proxy_set_header Upgrade $http_upgrade;
                        proxy_set_header Connection "upgrade";
                        proxy_set_header Host $host; 
                  }
            location /api/ {
              proxy_pass http://127.0.0.1:8001/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
            }
            location /docs              { proxy_pass http://127.0.0.1:8001; }
            location /openapi.json      { proxy_pass http://127.0.0.1:8001; }
            location /health            { proxy_pass http://127.0.0.1:8001; access_log off; }
          }
          NGINX
          sudo ln -sf /etc/nginx/sites-available/fastapi /etc/nginx/sites-enabled/fastapi
          sudo rm -f /etc/nginx/sites-enabled/default || true
          sudo nginx -t
          sudo systemctl restart nginx

          # quick local checks (don't fail job)
          ss -ltnp | egrep ':3000|:8001|:80' || true
          curl -fsS http://127.0.0.1:3000 >/dev/null && echo "UI OK" || echo "UI not ready yet"
          curl -fsS http://127.0.0.1:8001/openapi.json >/dev/null && echo "API OK" || echo "API not ready yet"
          curl -fsS http://localhost/docs >/dev/null && echo "Nginx OK" || echo "Nginx proxy not ready yet"
          EOF
